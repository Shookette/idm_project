/*
 * generated by Xtext
 */
grammar InternalVideoGen;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package istic.m2miage.idm.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package istic.m2miage.idm.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import istic.m2miage.idm.services.VideoGenGrammarAccess;

}

@parser::members {
 
 	private VideoGenGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(VideoGenGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleVideoGen
entryRuleVideoGen 
:
{ before(grammarAccess.getVideoGenRule()); }
	 ruleVideoGen
{ after(grammarAccess.getVideoGenRule()); } 
	 EOF 
;

// Rule VideoGen
ruleVideoGen
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVideoGenAccess().getGroup()); }
(rule__VideoGen__Group__0)
{ after(grammarAccess.getVideoGenAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVideoType
entryRuleVideoType 
:
{ before(grammarAccess.getVideoTypeRule()); }
	 ruleVideoType
{ after(grammarAccess.getVideoTypeRule()); } 
	 EOF 
;

// Rule VideoType
ruleVideoType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVideoTypeAccess().getAlternatives()); }
(rule__VideoType__Alternatives)
{ after(grammarAccess.getVideoTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMandatory
entryRuleMandatory 
:
{ before(grammarAccess.getMandatoryRule()); }
	 ruleMandatory
{ after(grammarAccess.getMandatoryRule()); } 
	 EOF 
;

// Rule Mandatory
ruleMandatory
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMandatoryAccess().getGroup()); }
(rule__Mandatory__Group__0)
{ after(grammarAccess.getMandatoryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOptional
entryRuleOptional 
:
{ before(grammarAccess.getOptionalRule()); }
	 ruleOptional
{ after(grammarAccess.getOptionalRule()); } 
	 EOF 
;

// Rule Optional
ruleOptional
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOptionalAccess().getGroup()); }
(rule__Optional__Group__0)
{ after(grammarAccess.getOptionalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAlternatives
entryRuleAlternatives 
:
{ before(grammarAccess.getAlternativesRule()); }
	 ruleAlternatives
{ after(grammarAccess.getAlternativesRule()); } 
	 EOF 
;

// Rule Alternatives
ruleAlternatives
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAlternativesAccess().getGroup()); }
(rule__Alternatives__Group__0)
{ after(grammarAccess.getAlternativesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVideoSeq
entryRuleVideoSeq 
:
{ before(grammarAccess.getVideoSeqRule()); }
	 ruleVideoSeq
{ after(grammarAccess.getVideoSeqRule()); } 
	 EOF 
;

// Rule VideoSeq
ruleVideoSeq
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVideoSeqAccess().getGroup()); }
(rule__VideoSeq__Group__0)
{ after(grammarAccess.getVideoSeqAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__VideoType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoTypeAccess().getMandatoryParserRuleCall_0()); }
	ruleMandatory
{ after(grammarAccess.getVideoTypeAccess().getMandatoryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVideoTypeAccess().getOptionalParserRuleCall_1()); }
	ruleOptional
{ after(grammarAccess.getVideoTypeAccess().getOptionalParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getVideoTypeAccess().getAlternativesParserRuleCall_2()); }
	ruleAlternatives
{ after(grammarAccess.getVideoTypeAccess().getAlternativesParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__VideoGen__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VideoGen__Group__0__Impl
	rule__VideoGen__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VideoGen__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoGenAccess().getVideoGenKeyword_0()); }

	'VideoGen' 

{ after(grammarAccess.getVideoGenAccess().getVideoGenKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VideoGen__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VideoGen__Group__1__Impl
	rule__VideoGen__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VideoGen__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoGenAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getVideoGenAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VideoGen__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VideoGen__Group__2__Impl
	rule__VideoGen__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VideoGen__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoGenAccess().getVideotypesAssignment_2()); }
(rule__VideoGen__VideotypesAssignment_2)*
{ after(grammarAccess.getVideoGenAccess().getVideotypesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VideoGen__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VideoGen__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VideoGen__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoGenAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getVideoGenAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Mandatory__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group__0__Impl
	rule__Mandatory__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getMandatoryKeyword_0()); }

	'mandatory' 

{ after(grammarAccess.getMandatoryAccess().getMandatoryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getVideoAssignment_1()); }
(rule__Mandatory__VideoAssignment_1)
{ after(grammarAccess.getMandatoryAccess().getVideoAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Optional__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__0__Impl
	rule__Optional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getOptionalKeyword_0()); }

	'optional' 

{ after(grammarAccess.getOptionalAccess().getOptionalKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getVideoAssignment_1()); }
(rule__Optional__VideoAssignment_1)
{ after(grammarAccess.getOptionalAccess().getVideoAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Alternatives__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternatives__Group__0__Impl
	rule__Alternatives__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternatives__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativesAccess().getAlternativesKeyword_0()); }

	'alternatives' 

{ after(grammarAccess.getAlternativesAccess().getAlternativesKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternatives__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternatives__Group__1__Impl
	rule__Alternatives__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternatives__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativesAccess().getNameAssignment_1()); }
(rule__Alternatives__NameAssignment_1)
{ after(grammarAccess.getAlternativesAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternatives__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternatives__Group__2__Impl
	rule__Alternatives__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternatives__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativesAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getAlternativesAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternatives__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternatives__Group__3__Impl
	rule__Alternatives__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternatives__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAlternativesAccess().getVideosAssignment_3()); }
(rule__Alternatives__VideosAssignment_3)
{ after(grammarAccess.getAlternativesAccess().getVideosAssignment_3()); }
)
(
{ before(grammarAccess.getAlternativesAccess().getVideosAssignment_3()); }
(rule__Alternatives__VideosAssignment_3)*
{ after(grammarAccess.getAlternativesAccess().getVideosAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternatives__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternatives__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternatives__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativesAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getAlternativesAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VideoSeq__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VideoSeq__Group__0__Impl
	rule__VideoSeq__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VideoSeq__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoSeqAccess().getVideoseqKeyword_0()); }

	'videoseq' 

{ after(grammarAccess.getVideoSeqAccess().getVideoseqKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VideoSeq__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VideoSeq__Group__1__Impl
	rule__VideoSeq__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VideoSeq__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoSeqAccess().getNameAssignment_1()); }
(rule__VideoSeq__NameAssignment_1)
{ after(grammarAccess.getVideoSeqAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VideoSeq__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VideoSeq__Group__2__Impl
	rule__VideoSeq__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VideoSeq__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoSeqAccess().getPathAssignment_2()); }
(rule__VideoSeq__PathAssignment_2)
{ after(grammarAccess.getVideoSeqAccess().getPathAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VideoSeq__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VideoSeq__Group__3__Impl
	rule__VideoSeq__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VideoSeq__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoSeqAccess().getProbabiliteAssignment_3()); }
(rule__VideoSeq__ProbabiliteAssignment_3)?
{ after(grammarAccess.getVideoSeqAccess().getProbabiliteAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VideoSeq__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VideoSeq__Group__4__Impl
	rule__VideoSeq__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VideoSeq__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoSeqAccess().getDescriptionAssignment_4()); }
(rule__VideoSeq__DescriptionAssignment_4)?
{ after(grammarAccess.getVideoSeqAccess().getDescriptionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VideoSeq__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VideoSeq__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VideoSeq__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoSeqAccess().getDureeAssignment_5()); }
(rule__VideoSeq__DureeAssignment_5)?
{ after(grammarAccess.getVideoSeqAccess().getDureeAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__VideoGen__VideotypesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoGenAccess().getVideotypesVideoTypeParserRuleCall_2_0()); }
	ruleVideoType{ after(grammarAccess.getVideoGenAccess().getVideotypesVideoTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__VideoAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getVideoVideoSeqParserRuleCall_1_0()); }
	ruleVideoSeq{ after(grammarAccess.getMandatoryAccess().getVideoVideoSeqParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__VideoAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getVideoVideoSeqParserRuleCall_1_0()); }
	ruleVideoSeq{ after(grammarAccess.getOptionalAccess().getVideoVideoSeqParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternatives__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativesAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAlternativesAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternatives__VideosAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativesAccess().getVideosVideoSeqParserRuleCall_3_0()); }
	ruleVideoSeq{ after(grammarAccess.getAlternativesAccess().getVideosVideoSeqParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VideoSeq__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoSeqAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVideoSeqAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VideoSeq__PathAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoSeqAccess().getPathSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getVideoSeqAccess().getPathSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VideoSeq__ProbabiliteAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoSeqAccess().getProbabiliteProbabilityTerminalRuleCall_3_0()); }
	RULE_PROBABILITY{ after(grammarAccess.getVideoSeqAccess().getProbabiliteProbabilityTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VideoSeq__DescriptionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoSeqAccess().getDescriptionSTRINGTerminalRuleCall_4_0()); }
	RULE_STRING{ after(grammarAccess.getVideoSeqAccess().getDescriptionSTRINGTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VideoSeq__DureeAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoSeqAccess().getDureeDurationTerminalRuleCall_5_0()); }
	RULE_DURATION{ after(grammarAccess.getVideoSeqAccess().getDureeDurationTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DURATION : RULE_INT '"';

RULE_PROBABILITY : RULE_INT '%';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


