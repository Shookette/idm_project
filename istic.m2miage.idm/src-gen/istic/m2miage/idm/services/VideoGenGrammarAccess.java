/*
 * generated by Xtext
 */
package istic.m2miage.idm.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class VideoGenGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class VideoGenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VideoGen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVideoGenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVideotypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVideotypesVideoTypeParserRuleCall_2_0 = (RuleCall)cVideotypesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VideoGen:
		//	"VideoGen" "{" videotypes+=VideoType* "}";
		@Override public ParserRule getRule() { return rule; }

		//"VideoGen" "{" videotypes+=VideoType* "}"
		public Group getGroup() { return cGroup; }

		//"VideoGen"
		public Keyword getVideoGenKeyword_0() { return cVideoGenKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//videotypes+=VideoType*
		public Assignment getVideotypesAssignment_2() { return cVideotypesAssignment_2; }

		//VideoType
		public RuleCall getVideotypesVideoTypeParserRuleCall_2_0() { return cVideotypesVideoTypeParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class VideoTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VideoType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMandatoryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAlternativesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VideoType:
		//	Mandatory | Optional | Alternatives;
		@Override public ParserRule getRule() { return rule; }

		//Mandatory | Optional | Alternatives
		public Alternatives getAlternatives() { return cAlternatives; }

		//Mandatory
		public RuleCall getMandatoryParserRuleCall_0() { return cMandatoryParserRuleCall_0; }

		//Optional
		public RuleCall getOptionalParserRuleCall_1() { return cOptionalParserRuleCall_1; }

		//Alternatives
		public RuleCall getAlternativesParserRuleCall_2() { return cAlternativesParserRuleCall_2; }
	}

	public class MandatoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mandatory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMandatoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVideoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVideoVideoSeqParserRuleCall_1_0 = (RuleCall)cVideoAssignment_1.eContents().get(0);
		
		//Mandatory:
		//	"mandatory" video+=VideoSeq;
		@Override public ParserRule getRule() { return rule; }

		//"mandatory" video+=VideoSeq
		public Group getGroup() { return cGroup; }

		//"mandatory"
		public Keyword getMandatoryKeyword_0() { return cMandatoryKeyword_0; }

		//video+=VideoSeq
		public Assignment getVideoAssignment_1() { return cVideoAssignment_1; }

		//VideoSeq
		public RuleCall getVideoVideoSeqParserRuleCall_1_0() { return cVideoVideoSeqParserRuleCall_1_0; }
	}

	public class OptionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Optional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVideoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVideoVideoSeqParserRuleCall_1_0 = (RuleCall)cVideoAssignment_1.eContents().get(0);
		
		//Optional:
		//	"optional" video+=VideoSeq;
		@Override public ParserRule getRule() { return rule; }

		//"optional" video+=VideoSeq
		public Group getGroup() { return cGroup; }

		//"optional"
		public Keyword getOptionalKeyword_0() { return cOptionalKeyword_0; }

		//video+=VideoSeq
		public Assignment getVideoAssignment_1() { return cVideoAssignment_1; }

		//VideoSeq
		public RuleCall getVideoVideoSeqParserRuleCall_1_0() { return cVideoVideoSeqParserRuleCall_1_0; }
	}

	public class AlternativesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alternatives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlternativesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVideosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVideosVideoSeqParserRuleCall_3_0 = (RuleCall)cVideosAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Alternatives:
		//	"alternatives" name=ID "{" videos+=VideoSeq+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"alternatives" name=ID "{" videos+=VideoSeq+ "}"
		public Group getGroup() { return cGroup; }

		//"alternatives"
		public Keyword getAlternativesKeyword_0() { return cAlternativesKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//videos+=VideoSeq+
		public Assignment getVideosAssignment_3() { return cVideosAssignment_3; }

		//VideoSeq
		public RuleCall getVideosVideoSeqParserRuleCall_3_0() { return cVideosVideoSeqParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class VideoSeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VideoSeq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVideoseqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Assignment cDureeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDureeSTRINGTerminalRuleCall_3_0 = (RuleCall)cDureeAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		
		//VideoSeq:
		//	"videoseq" name=ID path=STRING duree=STRING? description=STRING?;
		@Override public ParserRule getRule() { return rule; }

		//"videoseq" name=ID path=STRING duree=STRING? description=STRING?
		public Group getGroup() { return cGroup; }

		//"videoseq"
		public Keyword getVideoseqKeyword_0() { return cVideoseqKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//path=STRING
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_0() { return cPathSTRINGTerminalRuleCall_2_0; }

		//duree=STRING?
		public Assignment getDureeAssignment_3() { return cDureeAssignment_3; }

		//STRING
		public RuleCall getDureeSTRINGTerminalRuleCall_3_0() { return cDureeSTRINGTerminalRuleCall_3_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }
	}
	
	
	private final VideoGenElements pVideoGen;
	private final VideoTypeElements pVideoType;
	private final MandatoryElements pMandatory;
	private final OptionalElements pOptional;
	private final AlternativesElements pAlternatives;
	private final VideoSeqElements pVideoSeq;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VideoGenGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVideoGen = new VideoGenElements();
		this.pVideoType = new VideoTypeElements();
		this.pMandatory = new MandatoryElements();
		this.pOptional = new OptionalElements();
		this.pAlternatives = new AlternativesElements();
		this.pVideoSeq = new VideoSeqElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("istic.m2miage.idm.VideoGen".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//VideoGen:
	//	"VideoGen" "{" videotypes+=VideoType* "}";
	public VideoGenElements getVideoGenAccess() {
		return pVideoGen;
	}
	
	public ParserRule getVideoGenRule() {
		return getVideoGenAccess().getRule();
	}

	//VideoType:
	//	Mandatory | Optional | Alternatives;
	public VideoTypeElements getVideoTypeAccess() {
		return pVideoType;
	}
	
	public ParserRule getVideoTypeRule() {
		return getVideoTypeAccess().getRule();
	}

	//Mandatory:
	//	"mandatory" video+=VideoSeq;
	public MandatoryElements getMandatoryAccess() {
		return pMandatory;
	}
	
	public ParserRule getMandatoryRule() {
		return getMandatoryAccess().getRule();
	}

	//Optional:
	//	"optional" video+=VideoSeq;
	public OptionalElements getOptionalAccess() {
		return pOptional;
	}
	
	public ParserRule getOptionalRule() {
		return getOptionalAccess().getRule();
	}

	//Alternatives:
	//	"alternatives" name=ID "{" videos+=VideoSeq+ "}";
	public AlternativesElements getAlternativesAccess() {
		return pAlternatives;
	}
	
	public ParserRule getAlternativesRule() {
		return getAlternativesAccess().getRule();
	}

	//VideoSeq:
	//	"videoseq" name=ID path=STRING duree=STRING? description=STRING?;
	public VideoSeqElements getVideoSeqAccess() {
		return pVideoSeq;
	}
	
	public ParserRule getVideoSeqRule() {
		return getVideoSeqAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
