/*
 * generated by Xtext
 */
grammar InternalVideoGen;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package istic.m2miage.idm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package istic.m2miage.idm.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import istic.m2miage.idm.services.VideoGenGrammarAccess;

}

@parser::members {

 	private VideoGenGrammarAccess grammarAccess;
 	
    public InternalVideoGenParser(TokenStream input, VideoGenGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "VideoGen";	
   	}
   	
   	@Override
   	protected VideoGenGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleVideoGen
entryRuleVideoGen returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVideoGenRule()); }
	 iv_ruleVideoGen=ruleVideoGen 
	 { $current=$iv_ruleVideoGen.current; } 
	 EOF 
;

// Rule VideoGen
ruleVideoGen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='VideoGen' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVideoGenAccess().getVideoGenKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVideoGenAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVideoGenAccess().getVideotypesVideoTypeParserRuleCall_2_0()); 
	    }
		lv_videotypes_2_0=ruleVideoType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVideoGenRule());
	        }
       		add(
       			$current, 
       			"videotypes",
        		lv_videotypes_2_0, 
        		"VideoType");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVideoGenAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleVideoType
entryRuleVideoType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVideoTypeRule()); }
	 iv_ruleVideoType=ruleVideoType 
	 { $current=$iv_ruleVideoType.current; } 
	 EOF 
;

// Rule VideoType
ruleVideoType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVideoTypeAccess().getMandatoryParserRuleCall_0()); 
    }
    this_Mandatory_0=ruleMandatory
    { 
        $current = $this_Mandatory_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVideoTypeAccess().getOptionalParserRuleCall_1()); 
    }
    this_Optional_1=ruleOptional
    { 
        $current = $this_Optional_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVideoTypeAccess().getAlternativesParserRuleCall_2()); 
    }
    this_Alternatives_2=ruleAlternatives
    { 
        $current = $this_Alternatives_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMandatory
entryRuleMandatory returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMandatoryRule()); }
	 iv_ruleMandatory=ruleMandatory 
	 { $current=$iv_ruleMandatory.current; } 
	 EOF 
;

// Rule Mandatory
ruleMandatory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mandatory' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMandatoryAccess().getMandatoryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMandatoryAccess().getVideoVideoSeqParserRuleCall_1_0()); 
	    }
		lv_video_1_0=ruleVideoSeq		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMandatoryRule());
	        }
       		add(
       			$current, 
       			"video",
        		lv_video_1_0, 
        		"VideoSeq");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOptional
entryRuleOptional returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalRule()); }
	 iv_ruleOptional=ruleOptional 
	 { $current=$iv_ruleOptional.current; } 
	 EOF 
;

// Rule Optional
ruleOptional returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='optional' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOptionalAccess().getOptionalKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionalAccess().getVideoVideoSeqParserRuleCall_1_0()); 
	    }
		lv_video_1_0=ruleVideoSeq		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionalRule());
	        }
       		add(
       			$current, 
       			"video",
        		lv_video_1_0, 
        		"VideoSeq");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAlternatives
entryRuleAlternatives returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlternativesRule()); }
	 iv_ruleAlternatives=ruleAlternatives 
	 { $current=$iv_ruleAlternatives.current; } 
	 EOF 
;

// Rule Alternatives
ruleAlternatives returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='alternatives' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAlternativesAccess().getAlternativesKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAlternativesAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAlternativesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAlternativesAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativesAccess().getVideosVideoSeqParserRuleCall_3_0()); 
	    }
		lv_videos_3_0=ruleVideoSeq		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativesRule());
	        }
       		add(
       			$current, 
       			"videos",
        		lv_videos_3_0, 
        		"VideoSeq");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAlternativesAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleVideoSeq
entryRuleVideoSeq returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVideoSeqRule()); }
	 iv_ruleVideoSeq=ruleVideoSeq 
	 { $current=$iv_ruleVideoSeq.current; } 
	 EOF 
;

// Rule VideoSeq
ruleVideoSeq returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='videoseq' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVideoSeqAccess().getVideoseqKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVideoSeqAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVideoSeqRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_path_2_0=RULE_STRING
		{
			newLeafNode(lv_path_2_0, grammarAccess.getVideoSeqAccess().getPathSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVideoSeqRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"path",
        		lv_path_2_0, 
        		"STRING");
	    }

)
)(
(
		lv_duree_3_0=RULE_STRING
		{
			newLeafNode(lv_duree_3_0, grammarAccess.getVideoSeqAccess().getDureeSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVideoSeqRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"duree",
        		lv_duree_3_0, 
        		"STRING");
	    }

)
)?(
(
		lv_description_4_0=RULE_STRING
		{
			newLeafNode(lv_description_4_0, grammarAccess.getVideoSeqAccess().getDescriptionSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVideoSeqRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_4_0, 
        		"STRING");
	    }

)
)?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


